extends ../layout
include ../includes/mixins.jade


block content
  div.container
    div.row
      div.col-md-10(id=gene.symbol)
        div.row
          div.col-md-4
            h1(id="GeneTitle") #{gene.symbol} 
              p(style='font-size:15px') #{gene.description}
          div.col-md-8(id="variantList")
            - for item in variant
              a(data-toggle='collapse' href="#" + item.MUT_HGVS_AA + "_cardbox" aria-expanded="false" aria-controls=item.MUT_HGVS_AA + "_cardbox") #{item.MUT_HGVS_AA}
        div#stuffing
        div.row 
          ul.nav.nav-tabs(id="geneTab")
            li.nav-item.active(role='general')
              a.nav-link(data-toggle='tab' href='#generalInfo') General Info 
            li.nav-item(role='pview')
              a.nav-link(data-toggle='tab' href='#pv') 3D viewer
        div#stuffing
        div#stuffing
        div.tab-content 
          div.tab-pane.active.in.fade(id='generalInfo')
            div.row
              dl.dl-horizontal.col-md-4
                each l in Object.keys(gene.links)
                  if gene.links[l].display  
                    dt= l
                    dd
                      a(href = gene.links[l].link)= gene.links[l].display 
              div.col-md-8(id='protein-domain-graph')
            div.row(id="GeneInteraction") 
              div.col-md-6(id='lumier-interaction')
            div.row
              div.col-md-6(id='y2h-interaction')
          div.tab-pane.fade(id='pv')
        div.row(id='variantBox')
          - for item in variant 
            +cardblock(item)
      nav.col-md-2.bs-docs-sidebar.hidden-print(id='target_nav')
        ul.nav.nav-stacked.bs-docs-sidenav.fixed(id="sidebar")
          +nav_item("#" + gene.symbol) Gene
            ul.nav.nav-stacked(id="sidebar")
              +nav_item("#GeneDescription") Info
              +nav_item("#GeneInteraction") Interaction
          +nav_item("#VariantListing") Variants 
            ul.nav.nav-stacked(id="sidebar")
              - for item in variant
                +nav_item("#" + item.MUT_HGVS_AA + '_cardbox') #{item.MUT_HGVS_AA}
                //- li.active
                //-   a.btn.btn-primary(href="#collapseExample", data-toggle="collapse", aria-expanded="false" aria-controls="collapseExample")
                //- //- +nav_item("#" + item.MUT_HGVS_AA) #{item.MUT_HGVS_AA}
                //- 

prepend script 
  script(type='text/javascript').
    var gene =!{JSON.stringify(gene)}
    var variant =!{JSON.stringify(variant)}
    var radarChartData =!{JSON.stringify(radarChartData)} 
    console.log(variant)
    
    
prepend script         
  script(src='/bio-pv.min.js', type="text/javascript")
      
append script
  script(type="text/babel"). 
    var proteinDomainConfig = {
      "height": 125,
      "width": 460,
      "targetDOM": "#protein-domain-graph",
      "xoffset": 10,
      "yoffset": 90,
      "regionHeight": 15,
      "regionBGHeight": 10,
      "stickHeight": 20,
      "headRadius": 5,
      "regionFontSize": "10px",
      "headFontSize": "10px"
    }  
    var DomainGraph = React.createClass({
      getInitialState: function() {
        return {data: {}};
      },
      componentDidMount: function() {
        $.ajax({
          method: 'GET',
          url: document.location.protocol +"//"+ document.location.hostname + ':' + document.location.port + document.location.pathname + '/domainGraph',
          dataType: 'json',
          cache: false,
          success: function(data) {
            this.setState({data: data.proteinDomainData});
            var pg = new proteinDomainGraph(this.state.data, proteinDomainConfig)
          }.bind(this),
          error: function(xhr, status, err) {
            console.error('ajax domain graph failed', status, err.toString());
          }.bind(this)
        });
      },
      render: function() { 
        return (
          <div></div>
        );
      }
    });
    ReactDOM.render(
      <DomainGraph />,
      document.getElementById('protein-domain-graph')
    );
    
    
